// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProblemService.Infrastructure.Context;

#nullable disable

namespace ProblemService.Infrastructure.Migrations
{
    [DbContext(typeof(PMContext))]
    [Migration("20250824142544_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProblemService.Domain.Entities.InOutExample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputExample")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OutputExample")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("InOutExample", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Explanation = "1+2=3",
                            InputExample = "1 2",
                            IsDelete = false,
                            OutputExample = "3",
                            ProblemId = 1
                        },
                        new
                        {
                            Id = 2,
                            Explanation = "2*3=6",
                            InputExample = "2 3",
                            IsDelete = false,
                            OutputExample = "6",
                            ProblemId = 2
                        },
                        new
                        {
                            Id = 3,
                            Explanation = "Palindrome",
                            InputExample = "madam",
                            IsDelete = false,
                            OutputExample = "Yes",
                            ProblemId = 3
                        },
                        new
                        {
                            Id = 4,
                            Explanation = "Sorted",
                            InputExample = "3 1 2",
                            IsDelete = false,
                            OutputExample = "1 2 3",
                            ProblemId = 4
                        },
                        new
                        {
                            Id = 5,
                            Explanation = "Max is 9",
                            InputExample = "7 3 9",
                            IsDelete = false,
                            OutputExample = "9",
                            ProblemId = 5
                        });
                });

            modelBuilder.Entity("ProblemService.Domain.Entities.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Promt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Problem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Sum two numbers",
                            IsDelete = false,
                            Level = 1,
                            Name = "Sum",
                            Promt = "Sum prompt"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Multiply two numbers",
                            IsDelete = false,
                            Level = 2,
                            Name = "Multiply",
                            Promt = "Multiply prompt"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Check palindrome",
                            IsDelete = false,
                            Level = 3,
                            Name = "Palindrome",
                            Promt = "Palindrome prompt"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Sort a list",
                            IsDelete = false,
                            Level = 2,
                            Name = "Sort",
                            Promt = "Sort prompt"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Find max value",
                            IsDelete = false,
                            Level = 1,
                            Name = "Max",
                            Promt = "Max prompt"
                        });
                });

            modelBuilder.Entity("ProblemService.Domain.Entities.ProblemTag", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProblemId");

                    b.HasIndex("TagId");

                    b.ToTable("ProblemTag", (string)null);

                    b.HasData(
                        new
                        {
                            ProblemId = 1,
                            IsDelete = false,
                            TagId = 1
                        },
                        new
                        {
                            ProblemId = 2,
                            IsDelete = false,
                            TagId = 1
                        },
                        new
                        {
                            ProblemId = 3,
                            IsDelete = false,
                            TagId = 2
                        },
                        new
                        {
                            ProblemId = 4,
                            IsDelete = false,
                            TagId = 3
                        },
                        new
                        {
                            ProblemId = 5,
                            IsDelete = false,
                            TagId = 1
                        });
                });

            modelBuilder.Entity("ProblemService.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDelete = false,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 2,
                            IsDelete = false,
                            Name = "String"
                        },
                        new
                        {
                            Id = 3,
                            IsDelete = false,
                            Name = "Array"
                        },
                        new
                        {
                            Id = 4,
                            IsDelete = false,
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 5,
                            IsDelete = false,
                            Name = "Intermediate"
                        });
                });

            modelBuilder.Entity("ProblemService.Domain.Entities.InOutExample", b =>
                {
                    b.HasOne("ProblemService.Domain.Entities.Problem", "Problem")
                        .WithMany("InOutExamples")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ProblemService.Domain.Entities.ProblemTag", b =>
                {
                    b.HasOne("ProblemService.Domain.Entities.Problem", "Problem")
                        .WithMany("ProblemTags")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProblemService.Domain.Entities.Tag", "Tag")
                        .WithMany("ProblemTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ProblemService.Domain.Entities.Problem", b =>
                {
                    b.Navigation("InOutExamples");

                    b.Navigation("ProblemTags");
                });

            modelBuilder.Entity("ProblemService.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProblemTags");
                });
#pragma warning restore 612, 618
        }
    }
}
